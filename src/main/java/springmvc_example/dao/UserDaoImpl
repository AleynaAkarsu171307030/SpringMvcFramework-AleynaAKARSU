package springmvc_example.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import org.springframework.stereotype.Repository;

import springmvc_example.model.User;

@Repository
public class UserDaoImpl implements UserDao{
	 
	
	 NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	 public UserDaoImpl(DataSource dataSource) {
		// TODO Auto-generated constructor stub
	}

	@Autowired
	 public void setNamedParameterJdbcTemplate(NamedParameterJdbcTemplate namedParameterJdbcTemplate)throws DataAccessException{
		 this.namedParameterJdbcTemplate=namedParameterJdbcTemplate;
	 }
	
	public List<User> listAllUsers() {
	
	   
        
		String sql = "SELECT id,tc,ad,adres,telefon,mail,tarih,bilgi,sebep,düsünce,miktar,eklemek FROM users";
		  
		  List <User>list = namedParameterJdbcTemplate.query(sql, getSqlParameterByModel(null), new UserMapper());
		  
		  return list;
	}
private SqlParameterSource getSqlParameterByModel(User user) {
	  
			
	MapSqlParameterSource paramSource=new MapSqlParameterSource();
	if(user!=null) {
		paramSource.addValue("id",user.getId());
		paramSource.addValue("tc", user.getTc());
		paramSource.addValue("ad", user.getAd());
		paramSource.addValue("adres", user.getAdres());
		paramSource.addValue("telefon", user.getTelefon());
		paramSource.addValue("mail", user.getMail());
		paramSource.addValue("tarih", user.getTarih());
		paramSource.addValue("bilgi", user.getBilgi());
		paramSource.addValue("sebep", user.getSebep());
		paramSource.addValue("düsünce", user.getDüsünce());
		paramSource.addValue("miktar", user.getMiktar());
		paramSource.addValue("eklemek", user.getEklemek());
		
	}
	return paramSource;
}
private static final class UserMapper implements RowMapper<User>{
	public User mapRow(ResultSet rs, int rowNum)throws SQLException{
		User user=new User();
		user.setId(rs.getInt("id"));
		user.setTc(rs.getInt("tc"));
		user.setAd(rs.getString("ad"));
		user.setAdres(rs.getString("adres"));
		user.setTelefon(rs.getInt("telefon"));
		user.setMail(rs.getString("mail"));
		user.setTarih(rs.getString("tarih"));
		user.setBilgi(rs.getString("bilgi"));
		user.setSebep(rs.getString("sebep"));
		user.setDüsünce(rs.getString("düsünce"));
		user.setMiktar(rs.getInt("miktar"));
		user.setEklemek(rs.getString("eklemek"));
		return user;
	}
}
	public void addUser(User user) {
		
		String sql="INSERT INTO users(tc,ad,adres,telefon,mail,tarih,bilgi,sebep,düsünce,miktar,eklemek) VALUES (:tc, :ad, :adres, :telefon, :mail, :tarih, :bilgi, :sebep, :düsünce, :miktar, :eklemek)";
		namedParameterJdbcTemplate.update(sql, getSqlParameterByModel(user));
	}

	public void updateUser(User user) {
	String sql="UPDATE users SET tc = :tc, ad= :ad, adres= :adres, telefon= :telefon, mail= :mail, tarih= :tarih, bilgi= :bilgi, sebep= :sebep, düsünce= :düsünce, miktar= :miktar, eklemek= :eklemek WHERE id= :id";
	namedParameterJdbcTemplate.update(sql, getSqlParameterByModel(user));
		
	}

	public void deleteUser(int id) {
		String sql="DELETE FROM users WHERE id=:id";
		namedParameterJdbcTemplate.update(sql, getSqlParameterByModel(new User(id)));
	}

	public User findUserById(int id) {
		
		String sql="SELECT *FROM users WHERE id=:id";
		return namedParameterJdbcTemplate.queryForObject(sql,  getSqlParameterByModel(new User(id)), new UserMapper());
	}

}
